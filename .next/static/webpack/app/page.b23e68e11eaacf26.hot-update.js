"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/modules/crystalEngine.ts":
/*!**************************************!*\
  !*** ./app/modules/crystalEngine.ts ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildCrystalM: function() { return /* binding */ buildCrystalM; }\n/* harmony export */ });\n// app/modules/crystalEngine.ts\n// Punkt-M (~3000 Punkte), Entfaltung vom Anchor. Keine Linien.\nfunction buildCrystalM(ctx, anchor) {\n    const isMobile = /Mobi|Android|iPhone|iPad/i.test(navigator.userAgent);\n    // Geometrie in CSS-Pixeln planen (Canvas ist via setTransform DPR-korrigiert)\n    const rect = ctx.canvas.getBoundingClientRect();\n    const w = rect.width;\n    const h = rect.height;\n    // M-Kontrollpunkte (responsive)\n    const baseX = w * 0.30;\n    const baseY = h * 0.70;\n    const spanX = Math.max(200, w * 0.24);\n    const peakY = Math.min(baseY - h * 0.30, h * 0.40);\n    const P = [\n        {\n            x: baseX,\n            y: baseY\n        },\n        {\n            x: baseX + spanX * 0.25,\n            y: peakY\n        },\n        {\n            x: baseX + spanX * 0.50,\n            y: baseY * 0.93\n        },\n        {\n            x: baseX + spanX * 0.75,\n            y: peakY\n        },\n        {\n            x: baseX + spanX,\n            y: baseY\n        }\n    ];\n    // Segmente des M\n    const segs = [\n        {\n            a: P[0],\n            b: P[1]\n        },\n        {\n            a: P[1],\n            b: P[2]\n        },\n        {\n            a: P[2],\n            b: P[3]\n        },\n        {\n            a: P[3],\n            b: P[4]\n        }\n    ];\n    // Punktwolke generieren (~3000 Desktop / ~1600 Mobile)\n    const totalLen = segs.reduce((s, param)=>{\n        let { a, b } = param;\n        return s + Math.hypot(b.x - a.x, b.y - a.y);\n    }, 0);\n    const targetCount = isMobile ? 1600 : 3000;\n    const density = targetCount / totalLen;\n    const points = [];\n    for (const { a, b } of segs){\n        const len = Math.hypot(b.x - a.x, b.y - a.y);\n        const n = Math.max(2, Math.floor(len * density));\n        for(let i = 0; i < n; i++){\n            const t = i / (n - 1);\n            let x = a.x + (b.x - a.x) * t;\n            let y = a.y + (b.y - a.y) * t;\n            // kleiner orthogonaler Jitter für kristallige Lebendigkeit\n            const nx = (b.y - a.y) / len;\n            const ny = -(b.x - a.x) / len;\n            const jitter = (isMobile ? 0.6 : 1.0) * (Math.random() - 0.5) * 2;\n            x += nx * jitter;\n            y += ny * jitter;\n            points.push({\n                x,\n                y\n            });\n        }\n    }\n    // Reihenfolge: Wellenfront vom Anchor + leichte Zufallsvarianz\n    points.sort((p1, p2)=>{\n        const d1 = Math.hypot(p1.x - anchor.x, p1.y - anchor.y);\n        const d2 = Math.hypot(p2.x - anchor.x, p2.y - anchor.y);\n        return d1 - d2 + (Math.random() - 0.5) * 8;\n    });\n    // erster Punkt (Meteor/Anchor)\n    drawGold(anchor.x, anchor.y, isMobile ? 2.6 : 3.2);\n    let idx = 0;\n    const perFrame = isMobile ? 60 : 120;\n    const r = isMobile ? 1.4 : 1.8;\n    function frame() {\n        // nicht clearen – Punkte akkumulieren\n        for(let i = 0; i < perFrame && idx < points.length; i++, idx++){\n            const p = points[idx];\n            drawGold(p.x, p.y, r);\n        }\n        if (idx < points.length) requestAnimationFrame(frame);\n    }\n    requestAnimationFrame(frame);\n    function drawGold(x, y, rad) {\n        ctx.beginPath();\n        ctx.arc(x, y, rad, 0, Math.PI * 2);\n        ctx.fillStyle = \"#ffd700\";\n        ctx.shadowColor = \"rgba(255,215,0,0.9)\";\n        ctx.shadowBlur = 12;\n        ctx.fill();\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/modules/crystalEngine.ts\n"));

/***/ })

});
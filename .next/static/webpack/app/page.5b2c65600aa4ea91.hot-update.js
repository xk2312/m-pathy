"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/modules/crystalEngine.ts":
/*!**************************************!*\
  !*** ./app/modules/crystalEngine.ts ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildCrystalM: function() { return /* binding */ buildCrystalM; },\n/* harmony export */   computeMAnchor: function() { return /* binding */ computeMAnchor; }\n/* harmony export */ });\n// app/modules/crystalEngine.ts\n/** Liefert den exakten Anchor (linker unterer M-Punkt) für gegebene Maße */ function computeMAnchor(w, h) {\n    const leftX = w * 0.28;\n    const baseY = h * 0.74;\n    return {\n        x: leftX,\n        y: baseY\n    };\n}\n/**\n * Dotted-M, majestätisch & blau:\n * - Vertikale Säulen, diagonale Schenkel\n * - Caps füllen Ecken (oben, Tal, unten)\n * - Sequenzieller Aufbau P0→P1→P2→P3→P4 (~5s)\n * - Hohe Dichte + doppelte Breite, aber mit klaren Abständen\n */ function buildCrystalM(ctx, anchor) {\n    const isMobile = /Mobi|Android|iPhone|iPad/i.test(navigator.userAgent);\n    const rect = ctx.canvas.getBoundingClientRect();\n    const w = rect.width, h = rect.height;\n    // Proportionen (erhaben)\n    const baseY = h * 0.74;\n    const topY = h * 0.36;\n    const leftX = w * 0.28;\n    const rightX = w * 0.28 + Math.max(360, w * 0.32);\n    const midX = (leftX + rightX) / 2;\n    const valleyY = baseY - Math.max(90, h * 0.14);\n    const P = [\n        {\n            x: leftX,\n            y: baseY\n        },\n        {\n            x: leftX,\n            y: topY\n        },\n        {\n            x: midX,\n            y: valleyY\n        },\n        {\n            x: rightX,\n            y: topY\n        },\n        {\n            x: rightX,\n            y: baseY\n        }\n    ];\n    const segments = [\n        {\n            a: P[0],\n            b: P[1]\n        },\n        {\n            a: P[1],\n            b: P[2]\n        },\n        {\n            a: P[2],\n            b: P[3]\n        },\n        {\n            a: P[3],\n            b: P[4]\n        }\n    ];\n    // Look & Abstände\n    const dotRadius = isMobile ? 1.3 : 1.6;\n    const minGap = isMobile ? 1.8 : 2.2;\n    const alongGap = Math.max(isMobile ? 2.4 : 2.0, dotRadius * 2 + (minGap - 0.6));\n    const acrossGap = Math.max(isMobile ? 4.8 : 4.2, dotRadius * 2 + minGap);\n    const targetWidth = isMobile ? 28 : 56;\n    const maxRows = Math.max(1, Math.floor(targetWidth / acrossGap));\n    const durationSec = 5;\n    const dots = [];\n    let pathOffset = 0;\n    // Linienpunkte\n    for (const { a, b } of segments){\n        const dx = b.x - a.x, dy = b.y - a.y;\n        const len = Math.hypot(dx, dy);\n        if (len <= 0) continue;\n        const tx = dx / len, ty = dy / len;\n        const nx = ty, ny = -tx;\n        const rows = Math.max(1, maxRows);\n        const half = (rows - 1) / 2;\n        const steps = Math.max(2, Math.floor(len / alongGap));\n        for(let r = 0; r < rows; r++){\n            const offset = (r - half) * acrossGap;\n            const stagger = r % 2 * (alongGap * 0.5);\n            for(let i = 0; i <= steps; i++){\n                const d = i * alongGap + stagger;\n                if (d > len) continue;\n                const x = a.x + tx * d + nx * offset;\n                const y = a.y + ty * d + ny * offset;\n                dots.push({\n                    x,\n                    y,\n                    s: pathOffset + d\n                });\n            }\n        }\n        pathOffset += len;\n    }\n    // Caps an Ecken (oben links/rechts, Tal) + Endkappen unten\n    const capRadius = (maxRows - 1) * acrossGap * 0.55 + dotRadius;\n    addCap(P[1], capRadius);\n    addCap(P[2], capRadius);\n    addCap(P[3], capRadius);\n    addCap(P[0], capRadius * 0.85);\n    addCap(P[4], capRadius * 0.85);\n    function addCap(center, radius) {\n        const step = Math.max(dotRadius * 2 + minGap, acrossGap * 0.9);\n        const rings = Math.max(1, Math.floor(radius / step));\n        for(let r = 0; r <= rings; r++){\n            const rad = r * step;\n            const circ = 2 * Math.PI * Math.max(rad, 1);\n            const n = Math.max(6, Math.floor(circ / step));\n            for(let i = 0; i < n; i++){\n                const a = i / n * Math.PI * 2;\n                const x = center.x + Math.cos(a) * rad;\n                const y = center.y + Math.sin(a) * rad;\n                // s = Position entlang Pfad nahe der Ecke -> mit kleiner Verschiebung\n                dots.push({\n                    x,\n                    y,\n                    s: pathOffset + r * 0.001 + i * 0.0001\n                });\n            }\n        }\n    }\n    // Strikt entlang der Struktur (links -> rechts)\n    dots.sort((p, q)=>p.s - q.s);\n    // Zeitgesteuerter Aufbau (~5 s)\n    const total = dots.length;\n    const start = performance.now();\n    let drawn = 0;\n    // Erster Punkt (Meteor/Anchor) blau\n    drawDot(anchor.x, anchor.y, dotRadius + 0.9);\n    function tick(now) {\n        const t = Math.min((now - start) / 1000 / durationSec, 1);\n        const target = Math.floor(t * total);\n        for(; drawn < target && drawn < total; drawn++){\n            const p = dots[drawn];\n            drawDot(p.x, p.y, dotRadius);\n        }\n        if (drawn < total) requestAnimationFrame(tick);\n    }\n    requestAnimationFrame(tick);\n    function drawDot(x, y, r) {\n        ctx.beginPath();\n        ctx.arc(x, y, r, 0, Math.PI * 2);\n        ctx.fillStyle = \"#6BD5FF\";\n        ctx.shadowColor = \"rgba(107, 213, 255, 0.55)\";\n        ctx.shadowBlur = 4;\n        ctx.fill();\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/modules/crystalEngine.ts\n"));

/***/ })

});
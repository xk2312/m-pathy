"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/modules/crystalEngine.ts":
/*!**************************************!*\
  !*** ./app/modules/crystalEngine.ts ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildCrystalM: function() { return /* binding */ buildCrystalM; }\n/* harmony export */ });\n// app/modules/crystalEngine.ts\n/**\n * Dotted-M (Lichtenstein-Style), sehr hohe Dichte.\n * - Punkte bauen sich SEQUENZIELL entlang der M-Pfade auf (P0→P1→P2→P3→P4)\n * - Zeitgesteuert (~5s) via performance.now (FPS-unabhängig)\n * - Sehr viele Punkte (Desktop ~18k–24k, Mobile ~9k–12k) – anpassbar unten\n */ function buildCrystalM(ctx, anchor) {\n    const isMobile = /Mobi|Android|iPhone|iPad/i.test(navigator.userAgent);\n    // Canvas-Maße in CSS-Pixeln (DPR-Korrektur macht die Komponente)\n    const rect = ctx.canvas.getBoundingClientRect();\n    const w = rect.width, h = rect.height;\n    // --- M-Kontrollpunkte (responsive) ---\n    const baseX = w * 0.30;\n    const baseY = h * 0.72; // minimal tiefer für bessere Proportion\n    const spanX = Math.max(300, w * 0.28);\n    const peakY = Math.min(baseY - h * 0.32, h * 0.40);\n    const P = [\n        {\n            x: baseX,\n            y: baseY\n        },\n        {\n            x: baseX + spanX * 0.25,\n            y: peakY\n        },\n        {\n            x: baseX + spanX * 0.50,\n            y: baseY * 0.93\n        },\n        {\n            x: baseX + spanX * 0.75,\n            y: peakY\n        },\n        {\n            x: baseX + spanX,\n            y: baseY\n        }\n    ];\n    const segments = [\n        {\n            a: P[0],\n            b: P[1]\n        },\n        {\n            a: P[1],\n            b: P[2]\n        },\n        {\n            a: P[2],\n            b: P[3]\n        },\n        {\n            a: P[3],\n            b: P[4]\n        }\n    ];\n    // --- Dichte & Look (10x dichter als zuvor) ---\n    const spacingAlong = isMobile ? 1.4 : 1.0; // Abstand auf der Linie (kleiner = mehr Punkte)\n    const thicknessPx = isMobile ? 24 : 36; // optische Linienbreite in px\n    const spacingAcross = isMobile ? 4.5 : 3.0; // Abstand zwischen parallelen Reihen\n    const dotRadius = isMobile ? 1.3 : 1.6; // Punktgröße\n    const shadowBlur = 1.2; // ganz dezenter Glow\n    const durationSec = 5; // Gesamtaufbauzeit\n    // (Sicherheitskappe, falls Viewports riesig sind)\n    const MAX_POINTS = isMobile ? 12000 : 24000;\n    const dots = [];\n    // Kumulierte Pfadlänge zur sequentiellen Sortierung\n    let pathOffset = 0;\n    for (const { a, b } of segments){\n        const dx = b.x - a.x;\n        const dy = b.y - a.y;\n        const len = Math.hypot(dx, dy);\n        if (len === 0) continue;\n        const tx = dx / len; // Tangente\n        const ty = dy / len;\n        const nx = ty; // Normale (links)\n        const ny = -tx;\n        const rows = Math.max(1, Math.round(thicknessPx / spacingAcross));\n        const half = (rows - 1) / 2;\n        const steps = Math.max(2, Math.floor(len / spacingAlong));\n        for(let r = 0; r < rows; r++){\n            // symmetrische Offsets um die Mittelachse\n            const offset = (r - half) * spacingAcross;\n            // „Stagger“ für Rastergefühl: jede 2. Reihe versetzt\n            const stagger = r % 2 * (spacingAlong * 0.5);\n            for(let i = 0; i <= steps; i++){\n                const d = i * spacingAlong + stagger;\n                if (d > len) continue;\n                const x = a.x + tx * d + nx * offset;\n                const y = a.y + ty * d + ny * offset;\n                dots.push({\n                    x,\n                    y,\n                    s: pathOffset + d\n                }); // s: Position entlang des Gesamtpfads\n            }\n        }\n        pathOffset += len;\n    }\n    // Safety-Cap falls nötig (nimmt die frühesten entlang des Pfads)\n    if (dots.length > MAX_POINTS) {\n        dots.sort((p, q)=>p.s - q.s);\n        dots.length = MAX_POINTS;\n    }\n    // WICHTIG: SEQUENZIELLER AUFBAU ENTLANG DES PFADS\n    // Sortiere rein nach s (Pfadlänge) – keine Distanz-zum-Anchor-Welle mehr.\n    dots.sort((p, q)=>p.s - q.s);\n    // Zeitgesteuerte Animation (~5s), FPS-unabhängig\n    const total = dots.length;\n    const start = performance.now();\n    let drawn = 0;\n    // Erster Punkt (Meteor/Anchor) direkt setzen\n    drawDot(anchor.x, anchor.y, dotRadius + 0.8);\n    function tick(now) {\n        const elapsed = (now - start) / 1000; // Sek.\n        const t = Math.min(elapsed / durationSec, 1); // 0..1\n        const targetCount = Math.floor(t * total);\n        for(; drawn < targetCount && drawn < total; drawn++){\n            const p = dots[drawn];\n            drawDot(p.x, p.y, dotRadius);\n        }\n        if (drawn < total) requestAnimationFrame(tick);\n    }\n    requestAnimationFrame(tick);\n    function drawDot(x, y, r) {\n        ctx.beginPath();\n        ctx.arc(x, y, r, 0, Math.PI * 2);\n        ctx.fillStyle = \"#FFD700\";\n        ctx.shadowColor = \"rgba(255, 215, 0, 0.35)\";\n        ctx.shadowBlur = shadowBlur;\n        ctx.fill();\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/modules/crystalEngine.ts\n"));

/***/ })

});
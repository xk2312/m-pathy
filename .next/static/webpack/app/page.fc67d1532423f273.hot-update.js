"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/modules/crystalEngine.ts":
/*!**************************************!*\
  !*** ./app/modules/crystalEngine.ts ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildCrystalM: function() { return /* binding */ buildCrystalM; },\n/* harmony export */   computeMAnchor: function() { return /* binding */ computeMAnchor; }\n/* harmony export */ });\nfunction computeMAnchor(w, h) {\n    const leftX = w * 0.28;\n    const baseY = h * 0.74;\n    return {\n        x: leftX,\n        y: baseY\n    };\n}\n/**\n * Phase A: Kontur (nur äußere Reihen + Caps) – sequenziell P0→P4\n * Phase B: Füllen (innere Reihen) – weicher Strom, ebenfalls entlang der Segmente\n */ function buildCrystalM(ctx, anchor) {\n    const isMobile = /Mobi|Android|iPhone|iPad/i.test(navigator.userAgent);\n    const { width: w, height: h } = ctx.canvas.getBoundingClientRect();\n    // Proportionen – aufrechte Säulen\n    const baseY = h * 0.74;\n    const topY = h * 0.36;\n    const leftX = w * 0.28;\n    const rightX = w * 0.28 + Math.max(360, w * 0.32);\n    const midX = (leftX + rightX) / 2;\n    const valleyY = baseY - Math.max(90, h * 0.14);\n    const P = [\n        {\n            x: leftX,\n            y: baseY\n        },\n        {\n            x: leftX,\n            y: topY\n        },\n        {\n            x: midX,\n            y: valleyY\n        },\n        {\n            x: rightX,\n            y: topY\n        },\n        {\n            x: rightX,\n            y: baseY\n        }\n    ];\n    const segments = [\n        {\n            a: P[0],\n            b: P[1]\n        },\n        {\n            a: P[1],\n            b: P[2]\n        },\n        {\n            a: P[2],\n            b: P[3]\n        },\n        {\n            a: P[3],\n            b: P[4]\n        }\n    ];\n    // Look & Abstände\n    const dotR = isMobile ? 1.3 : 1.6;\n    const minGap = isMobile ? 1.8 : 2.2;\n    const gapAlong = Math.max(isMobile ? 2.4 : 2.0, dotR * 2 + (minGap - 0.6));\n    const gapAcross = Math.max(isMobile ? 4.8 : 4.2, dotR * 2 + minGap);\n    const widthPx = isMobile ? 28 : 56;\n    const maxRows = Math.max(1, Math.floor(widthPx / gapAcross));\n    const outlineRows = Math.max(1, Math.min(2, maxRows)) // Kontur = nur äußere 1–2 Reihen\n    ;\n    const duration = 5 // Sekunden\n    ;\n    // Hilfen\n    const draw = (x, y, r)=>{\n        ctx.beginPath();\n        ctx.arc(x, y, r, 0, Math.PI * 2);\n        ctx.fillStyle = \"#6BD5FF\";\n        ctx.shadowColor = \"rgba(107,213,255,0.55)\";\n        ctx.shadowBlur = 4;\n        ctx.fill();\n    };\n    const pushRowDots = (dots, a, b, rowIndex, rows, sOffset)=>{\n        const dx = b.x - a.x, dy = b.y - a.y, len = Math.hypot(dx, dy);\n        if (len <= 0) return;\n        const tx = dx / len, ty = dy / len, nx = ty, ny = -tx;\n        const half = (rows - 1) / 2;\n        const offset = (rowIndex - half) * gapAcross;\n        const steps = Math.max(2, Math.floor(len / gapAlong));\n        // KEIN Stagger in der ersten Dot des ersten Segments → Anchor exakt\n        for(let i = 0; i <= steps; i++){\n            const d = i * gapAlong;\n            if (d > len) continue;\n            const x = a.x + tx * d + nx * offset;\n            const y = a.y + ty * d + ny * offset;\n            dots.push({\n                x,\n                y,\n                s: sOffset + d + rowIndex * 0.001\n            });\n        }\n    };\n    // Phase A: äußere Reihen (Kontur)\n    const outlineDots = [];\n    let sAccum = 0;\n    for (const seg of segments){\n        const len = Math.hypot(seg.b.x - seg.a.x, seg.b.y - seg.a.y);\n        for(let r = 0; r < outlineRows; r++){\n            pushRowDots(outlineDots, seg.a, seg.b, r === 0 ? 0 : maxRows - 1, maxRows, sAccum);\n        }\n        sAccum += len;\n    }\n    // Caps (Ecken + Enden) nur in Phase A\n    addCap(outlineDots, P[1]);\n    addCap(outlineDots, P[2]);\n    addCap(outlineDots, P[3]);\n    addCap(outlineDots, P[0], 0.85);\n    addCap(outlineDots, P[4], 0.85);\n    // Phase B: innere Reihen (Füllung)\n    const fillDots = [];\n    sAccum = 0;\n    for (const seg of segments){\n        const len = Math.hypot(seg.b.x - seg.a.x, seg.b.y - seg.a.y);\n        for(let r = 1; r < maxRows - 1; r++){\n            pushRowDots(fillDots, seg.a, seg.b, r, maxRows, sAccum);\n        }\n        sAccum += len;\n    }\n    // Sortierung: streng entlang des Pfads\n    outlineDots.sort((p, q)=>p.s - q.s);\n    fillDots.sort((p, q)=>p.s - q.s);\n    // Animation: 1s Delay nach Meteor, dann 60% Zeit Kontur, 40% Füllung\n    const start = performance.now() + 1000;\n    const outlineEnd = start + duration * 1000 * 0.60;\n    const finish = start + duration * 1000;\n    // Erster Punkt (Anchor) sofort setzen\n    draw(anchor.x, anchor.y, dotR + 0.9);\n    let iA = 0, iB = 0;\n    function tick(now) {\n        if (now >= start) {\n            if (now <= outlineEnd) {\n                // Kontur-Phase\n                const t = (now - start) / (outlineEnd - start);\n                const target = Math.floor(t * outlineDots.length);\n                for(; iA < target; iA++)draw(outlineDots[iA].x, outlineDots[iA].y, dotR);\n            } else {\n                // Füllphase\n                for(; iA < outlineDots.length; iA++)draw(outlineDots[iA].x, outlineDots[iA].y, dotR);\n                const t = (now - outlineEnd) / (finish - outlineEnd);\n                const target = Math.floor(t * fillDots.length);\n                for(; iB < target; iB++)draw(fillDots[iB].x, fillDots[iB].y, dotR);\n            }\n        }\n        if (now < finish || iB < fillDots.length) requestAnimationFrame(tick);\n    }\n    requestAnimationFrame(tick);\n    function addCap(list, C) {\n        let scale = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;\n        const capR = ((maxRows - 1) * gapAcross * 0.55 + dotR) * scale;\n        const step = Math.max(dotR * 2 + minGap, gapAcross * 0.9);\n        const rings = Math.max(1, Math.floor(capR / step));\n        let localS = 0;\n        for(let r = 0; r <= rings; r++){\n            const rad = r * step;\n            const circ = 2 * Math.PI * Math.max(rad, 1);\n            const n = Math.max(6, Math.floor(circ / step));\n            for(let i = 0; i < n; i++){\n                const a = i / n * Math.PI * 2;\n                list.push({\n                    x: C.x + Math.cos(a) * rad,\n                    y: C.y + Math.sin(a) * rad,\n                    s: Number.MAX_SAFE_INTEGER - 1000 + localS++ // Caps am Ende der Konturphase\n                });\n            }\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/modules/crystalEngine.ts\n"));

/***/ })

});
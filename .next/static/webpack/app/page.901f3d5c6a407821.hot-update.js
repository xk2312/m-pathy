"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/modules/crystalEngine.ts":
/*!**************************************!*\
  !*** ./app/modules/crystalEngine.ts ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildCrystalM: function() { return /* binding */ buildCrystalM; },\n/* harmony export */   computeMAnchor: function() { return /* binding */ computeMAnchor; }\n/* harmony export */ });\n// app/modules/crystalEngine.ts\n/** Linker unterer Anker exakt wie im M */ function computeMAnchor(w, h) {\n    const leftX = w * 0.28;\n    const baseY = h * 0.74;\n    return {\n        x: leftX,\n        y: baseY\n    };\n}\n/**\n * Pen-Sweep: Ein digitaler Stift fährt den Pfad P0→P1→P2→P3→P4 in ~5 s ab\n * und setzt unterwegs Punkte (mehrere parallele Reihen = Strichbreite)\n * mit Mindestabstand. Runde Caps + runde Joins; Valley-Plug füllt die V-Kerbe.\n */ function buildCrystalM(ctx, anchor) {\n    const isMobile = /Mobi|Android|iPhone|iPad/i.test(navigator.userAgent);\n    const { width: w, height: h } = ctx.canvas.getBoundingClientRect();\n    // Proportionen (aufrechte Säulen)\n    const baseY = h * 0.74;\n    const topY = h * 0.36;\n    const leftX = w * 0.28;\n    const rightX = w * 0.28 + Math.max(360, w * 0.32);\n    const midX = (leftX + rightX) / 2;\n    const valleyY = baseY - Math.max(90, h * 0.14);\n    const P = [\n        {\n            x: leftX,\n            y: baseY\n        },\n        {\n            x: leftX,\n            y: topY\n        },\n        {\n            x: midX,\n            y: valleyY\n        },\n        {\n            x: rightX,\n            y: topY\n        },\n        {\n            x: rightX,\n            y: baseY\n        }\n    ];\n    // Segmente + Geometrie\n    const segs = [\n        {\n            a: P[0],\n            b: P[1]\n        },\n        {\n            a: P[1],\n            b: P[2]\n        },\n        {\n            a: P[2],\n            b: P[3]\n        },\n        {\n            a: P[3],\n            b: P[4]\n        }\n    ].map((s)=>{\n        const dx = s.b.x - s.a.x;\n        const dy = s.b.y - s.a.y;\n        const len = Math.hypot(dx, dy);\n        const tx = len ? dx / len : 0;\n        const ty = len ? dy / len : 0;\n        const nx = ty;\n        const ny = -tx;\n        return {\n            ...s,\n            dx,\n            dy,\n            len,\n            tx,\n            ty,\n            nx,\n            ny\n        };\n    });\n    const totalLen = segs.reduce((s, g)=>s + g.len, 0);\n    // Look & Rasterabstände\n    const dotR = isMobile ? 1.3 : 1.6;\n    const minGap = isMobile ? 1.8 : 2.2;\n    const stepAlong = Math.max(isMobile ? 2.4 : 2.0, dotR * 2 + (minGap - 0.6));\n    const gapAcross = Math.max(isMobile ? 4.8 : 4.2, dotR * 2 + minGap);\n    const widthPx = isMobile ? 28 : 56;\n    const rows = Math.max(1, Math.floor(widthPx / gapAcross));\n    const durationSec = 5;\n    // Zeitsteuerung\n    const start = performance.now();\n    let prevS = 0;\n    let raf = 0;\n    // Spatial Hash (Abstands-Garantie)\n    const cell = Math.min(stepAlong, gapAcross) * 0.9;\n    const placed = new Set();\n    const key = (x, y)=>\"\".concat(Math.round(x / cell), \":\").concat(Math.round(y / cell));\n    const drawDot = function(x, y) {\n        let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : dotR;\n        ctx.beginPath();\n        ctx.arc(x, y, r, 0, Math.PI * 2);\n        ctx.fillStyle = \"#6BD5FF\";\n        ctx.shadowColor = \"rgba(107,213,255,0.55)\";\n        ctx.shadowBlur = 4;\n        ctx.fill();\n    };\n    const tryDot = function(x, y) {\n        let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : dotR;\n        const k = key(x, y);\n        if (placed.has(k)) return false;\n        placed.add(k);\n        drawDot(x, y, r);\n        return true;\n    };\n    // Erstpunkt (Anchor)\n    tryDot(anchor.x, anchor.y, dotR + 0.9);\n    const extras = [];\n    // Start-Cap (Halbkreis am P0)\n    if (segs[0]) pushRoundCap(extras, P[0], -segs[0].tx, -segs[0].ty, rows, gapAcross, dotR, stepAlong, 0);\n    // Joins an P1, P2, P3 (+ Valley-Plug an P2)\n    for(let i = 1; i < segs.length; i++){\n        const prev = segs[i - 1], next = segs[i];\n        const sAtCorner = segs.slice(0, i).reduce((s, g)=>s + g.len, 0);\n        pushRoundJoin(extras, P[i], prev, next, rows, gapAcross, dotR, stepAlong, sAtCorner);\n        if (i === 2) {\n            pushValleyPlug(extras, P[2], segs[1], segs[2], rows, gapAcross, dotR, sAtCorner);\n        }\n    }\n    // End-Cap (Halbkreis am P4)\n    const lenBeforeEnd = segs.reduce((s, g)=>s + g.len, 0);\n    pushRoundCap(extras, P[4], segs[segs.length - 1].tx, segs[segs.length - 1].ty, rows, gapAcross, dotR, stepAlong, lenBeforeEnd);\n    extras.sort((a, b)=>a.s - b.s);\n    let extraIdx = 0;\n    // PEN-SWEEP\n    function tick(now) {\n        const t = Math.min((now - start) / (durationSec * 1000), 1);\n        const sTarget = t * totalLen;\n        // entlang des Pfads Punkte setzen (mehrere Reihen = Strichbreite)\n        for(let s = prevS; s <= sTarget; s += stepAlong){\n            const pos = pointAtLength(s);\n            if (!pos) continue;\n            const { x, y, nx, ny } = pos;\n            const half = (rows - 1) / 2;\n            for(let r = 0; r < rows; r++){\n                const offset = (r - half) * gapAcross;\n                tryDot(x + nx * offset, y + ny * offset);\n            }\n        }\n        prevS = sTarget;\n        // Extras, deren s erreicht ist\n        while(extraIdx < extras.length && extras[extraIdx].s <= sTarget){\n            const e = extras[extraIdx++];\n            var _e_r;\n            tryDot(e.x, e.y, (_e_r = e.r) !== null && _e_r !== void 0 ? _e_r : dotR);\n        }\n        if (t < 1 || extraIdx < extras.length) {\n            raf = requestAnimationFrame(tick);\n        } else {\n            cancelAnimationFrame(raf);\n        }\n    }\n    raf = requestAnimationFrame(tick);\n    // ---------- Helpers -------------------------------------------------------\n    function pointAtLength(s) {\n        let acc = 0;\n        for (const g of segs){\n            if (s <= acc + g.len) {\n                const d = s - acc;\n                const t = g.len ? d / g.len : 0;\n                const x = g.a.x + g.dx * t;\n                const y = g.a.y + g.dy * t;\n                return {\n                    x,\n                    y,\n                    nx: g.nx,\n                    ny: g.ny\n                };\n            }\n            acc += g.len;\n        }\n        const last = segs[segs.length - 1];\n        return {\n            x: last.b.x,\n            y: last.b.y,\n            nx: last.ny,\n            ny: -last.nx\n        };\n    }\n    // runder End-Cap (Halbkreis)\n    function pushRoundCap(out, C, tx, ty, nRows, across, rDot, along, sBase) {\n        const half = (nRows - 1) / 2;\n        const radius = half * across;\n        const arcStart = Math.atan2(-ty, -tx) - Math.PI / 2;\n        const arcEnd = arcStart + Math.PI;\n        const ringStep = Math.max(rDot * 2 + minGap, across * 0.9);\n        const rings = Math.max(1, Math.floor(radius / ringStep));\n        let seq = 0;\n        for(let r = 0; r <= rings; r++){\n            const rad = r * ringStep;\n            const circ = 2 * Math.PI * Math.max(rad, 1);\n            const pts = Math.max(6, Math.floor(circ / (rDot * 2 + minGap)));\n            for(let i = 0; i <= pts; i++){\n                const a = arcStart + i / pts * (arcEnd - arcStart);\n                out.push({\n                    s: sBase + 0.001 * seq++,\n                    x: C.x + Math.cos(a) * rad,\n                    y: C.y + Math.sin(a) * rad\n                });\n            }\n        }\n    }\n    // runder Join (Sektor) zwischen zwei Segmenten am Eckpunkt C (stabil, inkl. Large-Arc)\n    function pushRoundJoin(out, C, prev, next, nRows, across, rDot, along, sAtCorner) {\n        const aIn = Math.atan2(prev.ny, prev.nx);\n        const aOut = Math.atan2(next.ny, next.nx);\n        // Tangenten (für konkav/konvex)\n        let tIn = Math.atan2(prev.ty, prev.tx);\n        let tOut = Math.atan2(next.ty, next.tx);\n        while(tOut - tIn <= -Math.PI)tOut += 2 * Math.PI;\n        while(tOut - tIn > Math.PI)tOut -= 2 * Math.PI;\n        const turn = tOut - tIn;\n        // Winkel-Differenz der Normalen auf [-π,π]\n        let delta = aOut - aIn;\n        while(delta <= -Math.PI)delta += 2 * Math.PI;\n        while(delta > Math.PI)delta -= 2 * Math.PI;\n        // konkav → großen Bogen nehmen\n        const useLargeArc = Math.abs(turn) > Math.PI / 2;\n        let startAngle = aIn;\n        let endAngle = aIn + delta;\n        if (useLargeArc) {\n            if (delta > 0) endAngle = aIn - (2 * Math.PI - delta);\n            else endAngle = aIn + (2 * Math.PI + delta);\n        }\n        const radius = (nRows - 1) * across / 2;\n        const ringStep = Math.max(rDot * 2 + minGap, across * 0.9);\n        const rings = Math.max(1, Math.floor(radius / ringStep));\n        const angStep = Math.max((rDot * 2 + minGap) / Math.max(radius, 1), Math.PI / 36);\n        const dir = endAngle >= startAngle ? 1 : -1;\n        let seq = 0;\n        for(let r = 0; r <= rings; r++){\n            const rad = r * ringStep;\n            for(let a = startAngle; dir > 0 ? a <= endAngle : a >= endAngle; a += dir * angStep){\n                out.push({\n                    s: sAtCorner + 0.001 * seq++,\n                    x: C.x + Math.cos(a) * rad,\n                    y: C.y + Math.sin(a) * rad\n                });\n            }\n        }\n        out.push({\n            s: sAtCorner + 0.002 * seq++,\n            x: C.x,\n            y: C.y,\n            r: rDot\n        });\n    }\n    // füllt die innere V-Ecke (Tal) weich\n    function pushValleyPlug(out, C, prev, next, nRows, across, rDot, sAtCorner) {\n        // Innen-Bisektor\n        let bx = -prev.tx + next.tx;\n        let by = -prev.ty + next.ty;\n        const bl = Math.hypot(bx, by) || 1;\n        bx /= bl;\n        by /= bl;\n        const innerR = (nRows - 1) * across * 0.48;\n        const cx = C.x + bx * (innerR * 0.35);\n        const cy = C.y + by * (innerR * 0.35);\n        const ringStep = Math.max(rDot * 2.0, across * 0.9);\n        const rings = Math.max(2, Math.floor(innerR / ringStep));\n        let seq = 0;\n        for(let r = 0; r <= rings; r++){\n            const rad = r / rings * innerR;\n            const circ = 2 * Math.PI * Math.max(rad, 1);\n            const step = Math.max(rDot * 2.0, across * 0.9);\n            const n = Math.max(8, Math.floor(circ / step));\n            for(let i = 0; i < n; i++){\n                const a = i / n * Math.PI * 2;\n                out.push({\n                    s: sAtCorner + 0.001 * seq++,\n                    x: cx + Math.cos(a) * rad,\n                    y: cy + Math.sin(a) * rad\n                });\n            }\n        }\n        out.push({\n            s: sAtCorner + 0.002 * seq++,\n            x: cx,\n            y: cy,\n            r: rDot\n        });\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/modules/crystalEngine.ts\n"));

/***/ })

});
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/page"],{

/***/ "(app-pages-browser)/./node_modules/.pnpm/next@14.2.3_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fnabilkhayat%2FProjekte%2FM-PATHY%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!":
/*!********************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@14.2.3_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fnabilkhayat%2FProjekte%2FM-PATHY%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false! ***!
  \********************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/page.tsx */ \"(app-pages-browser)/./app/page.tsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE0LjIuM19yZWFjdC1kb21AMTguMi4wX3JlYWN0QDE4LjIuMF9fcmVhY3RAMTguMi4wL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyJTJGVXNlcnMlMkZuYWJpbGtoYXlhdCUyRlByb2pla3RlJTJGTS1QQVRIWSUyRmFwcCUyRnBhZ2UudHN4JTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJnNlcnZlcj1mYWxzZSEiLCJtYXBwaW5ncyI6IkFBQUEsc0pBQXFGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8/MDIwMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy9uYWJpbGtoYXlhdC9Qcm9qZWt0ZS9NLVBBVEhZL2FwcC9wYWdlLnRzeFwiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/next@14.2.3_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fnabilkhayat%2FProjekte%2FM-PATHY%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./styles/m-path.css":
/*!***************************!*\
  !*** ./styles/m-path.css ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"1369c6549709\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3N0eWxlcy9tLXBhdGguY3NzIiwibWFwcGluZ3MiOiI7QUFBQSwrREFBZSxjQUFjO0FBQzdCLElBQUksSUFBVSxJQUFJLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zdHlsZXMvbS1wYXRoLmNzcz9jNDMzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiMTM2OWM2NTQ5NzA5XCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./styles/m-path.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/components/CanvasMeteorAndM.tsx":
/*!*********************************************!*\
  !*** ./app/components/CanvasMeteorAndM.tsx ***!
  \*********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.3_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.3_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _styles_m_path_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/styles/m-path.css */ \"(app-pages-browser)/./styles/m-path.css\");\n/* harmony import */ var _modules_meteorEngine__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/modules/meteorEngine */ \"(app-pages-browser)/./app/modules/meteorEngine.ts\");\n/* harmony import */ var _modules_crystalEngine__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/modules/crystalEngine */ \"(app-pages-browser)/./app/modules/crystalEngine.ts\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\nfunction CanvasMeteorAndM() {\n    _s();\n    const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) return;\n        // DPR-aware Resize\n        const resize = ()=>{\n            const dpr = window.devicePixelRatio || 1;\n            const w = window.innerWidth;\n            const h = window.innerHeight;\n            canvas.style.width = \"\".concat(w, \"px\");\n            canvas.style.height = \"\".concat(h, \"px\");\n            canvas.width = Math.floor(w * dpr);\n            canvas.height = Math.floor(h * dpr);\n            ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n        };\n        resize();\n        window.addEventListener(\"resize\", resize);\n        // Anchor exakt aus den M-Parametern ableiten\n        const rect = canvas.getBoundingClientRect();\n        const anchor = (0,_modules_crystalEngine__WEBPACK_IMPORTED_MODULE_4__.computeMAnchor)(rect.width, rect.height);\n        const stop = (0,_modules_meteorEngine__WEBPACK_IMPORTED_MODULE_3__.startMeteorSequence)(ctx, anchor, ()=>{\n            // 1 Sekunde stehen lassen, dann aufbauen\n            setTimeout(()=>(0,_modules_crystalEngine__WEBPACK_IMPORTED_MODULE_4__.buildCrystalM)(ctx, anchor), 1000);\n        });\n        return ()=>{\n            window.removeEventListener(\"resize\", resize);\n            if (typeof stop === \"function\") stop();\n        };\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"canvas\", {\n        ref: canvasRef,\n        className: \"m-canvas\"\n    }, void 0, false, {\n        fileName: \"/Users/nabilkhayat/Projekte/M-PATHY/app/components/CanvasMeteorAndM.tsx\",\n        lineNumber: 50,\n        columnNumber: 10\n    }, this);\n}\n_s(CanvasMeteorAndM, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = CanvasMeteorAndM;\n/* harmony default export */ __webpack_exports__[\"default\"] = (CanvasMeteorAndM);\nvar _c;\n$RefreshReg$(_c, \"CanvasMeteorAndM\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9jb21wb25lbnRzL0NhbnZhc01ldGVvckFuZE0udHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUVnRDtBQUNwQjtBQUNnQztBQUNXO0FBRXZFLFNBQVNNOztJQUNQLE1BQU1DLFlBQVlMLDZDQUFNQSxDQUFvQjtJQUU1Q0QsZ0RBQVNBLENBQUM7UUFDUixNQUFNTyxTQUFTRCxVQUFVRSxPQUFPO1FBQ2hDLElBQUksQ0FBQ0QsUUFBUTtRQUNiLE1BQU1FLE1BQU1GLE9BQU9HLFVBQVUsQ0FBQztRQUM5QixJQUFJLENBQUNELEtBQUs7UUFFVixtQkFBbUI7UUFDbkIsTUFBTUUsU0FBUztZQUNiLE1BQU1DLE1BQU1DLE9BQU9DLGdCQUFnQixJQUFJO1lBQ3ZDLE1BQU1DLElBQUlGLE9BQU9HLFVBQVU7WUFDM0IsTUFBTUMsSUFBSUosT0FBT0ssV0FBVztZQUM1QlgsT0FBT1ksS0FBSyxDQUFDQyxLQUFLLEdBQUcsR0FBSyxPQUFGTCxHQUFFO1lBQzFCUixPQUFPWSxLQUFLLENBQUNFLE1BQU0sR0FBRyxHQUFLLE9BQUZKLEdBQUU7WUFDM0JWLE9BQU9hLEtBQUssR0FBR0UsS0FBS0MsS0FBSyxDQUFDUixJQUFJSDtZQUM5QkwsT0FBT2MsTUFBTSxHQUFHQyxLQUFLQyxLQUFLLENBQUNOLElBQUlMO1lBQy9CSCxJQUFJZSxZQUFZLENBQUNaLEtBQUssR0FBRyxHQUFHQSxLQUFLLEdBQUc7UUFDdEM7UUFDQUQ7UUFDQUUsT0FBT1ksZ0JBQWdCLENBQUMsVUFBVWQ7UUFFbEMsNkNBQTZDO1FBQzdDLE1BQU1lLE9BQU9uQixPQUFPb0IscUJBQXFCO1FBQ3pDLE1BQU1DLFNBQVN4QixzRUFBY0EsQ0FBQ3NCLEtBQUtOLEtBQUssRUFBRU0sS0FBS0wsTUFBTTtRQUVyRCxNQUFNUSxPQUFPM0IsMEVBQW1CQSxDQUM5Qk8sS0FDQW1CLFFBQ0E7WUFDRSx5Q0FBeUM7WUFDekNFLFdBQVcsSUFBTTNCLHFFQUFhQSxDQUFDTSxLQUFLbUIsU0FBUztRQUMvQztRQUdGLE9BQU87WUFDTGYsT0FBT2tCLG1CQUFtQixDQUFDLFVBQVVwQjtZQUNyQyxJQUFJLE9BQU9rQixTQUFTLFlBQVlBO1FBQ2xDO0lBQ0YsR0FBRyxFQUFFO0lBRUwscUJBQU8sOERBQUN0QjtRQUFPeUIsS0FBSzFCO1FBQVcyQixXQUFVOzs7Ozs7QUFDM0M7R0EzQ1M1QjtLQUFBQTtBQTZDVCwrREFBZUEsZ0JBQWdCQSxFQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2FwcC9jb21wb25lbnRzL0NhbnZhc01ldGVvckFuZE0udHN4PzAyODQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnXG5cbmltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0ICdAL3N0eWxlcy9tLXBhdGguY3NzJ1xuaW1wb3J0IHsgc3RhcnRNZXRlb3JTZXF1ZW5jZSB9IGZyb20gJ0AvbW9kdWxlcy9tZXRlb3JFbmdpbmUnXG5pbXBvcnQgeyBidWlsZENyeXN0YWxNLCBjb21wdXRlTUFuY2hvciB9IGZyb20gJ0AvbW9kdWxlcy9jcnlzdGFsRW5naW5lJ1xuXG5mdW5jdGlvbiBDYW52YXNNZXRlb3JBbmRNKCkge1xuICBjb25zdCBjYW52YXNSZWYgPSB1c2VSZWY8SFRNTENhbnZhc0VsZW1lbnQ+KG51bGwpXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBjYW52YXMgPSBjYW52YXNSZWYuY3VycmVudFxuICAgIGlmICghY2FudmFzKSByZXR1cm5cbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKVxuICAgIGlmICghY3R4KSByZXR1cm5cblxuICAgIC8vIERQUi1hd2FyZSBSZXNpemVcbiAgICBjb25zdCByZXNpemUgPSAoKSA9PiB7XG4gICAgICBjb25zdCBkcHIgPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxXG4gICAgICBjb25zdCB3ID0gd2luZG93LmlubmVyV2lkdGhcbiAgICAgIGNvbnN0IGggPSB3aW5kb3cuaW5uZXJIZWlnaHRcbiAgICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9IGAke3d9cHhgXG4gICAgICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gYCR7aH1weGBcbiAgICAgIGNhbnZhcy53aWR0aCA9IE1hdGguZmxvb3IodyAqIGRwcilcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSBNYXRoLmZsb29yKGggKiBkcHIpXG4gICAgICBjdHguc2V0VHJhbnNmb3JtKGRwciwgMCwgMCwgZHByLCAwLCAwKVxuICAgIH1cbiAgICByZXNpemUoKVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemUpXG5cbiAgICAvLyBBbmNob3IgZXhha3QgYXVzIGRlbiBNLVBhcmFtZXRlcm4gYWJsZWl0ZW5cbiAgICBjb25zdCByZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgY29uc3QgYW5jaG9yID0gY29tcHV0ZU1BbmNob3IocmVjdC53aWR0aCwgcmVjdC5oZWlnaHQpXG5cbiAgICBjb25zdCBzdG9wID0gc3RhcnRNZXRlb3JTZXF1ZW5jZShcbiAgICAgIGN0eCxcbiAgICAgIGFuY2hvcixcbiAgICAgICgpID0+IHtcbiAgICAgICAgLy8gMSBTZWt1bmRlIHN0ZWhlbiBsYXNzZW4sIGRhbm4gYXVmYmF1ZW5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiBidWlsZENyeXN0YWxNKGN0eCwgYW5jaG9yKSwgMTAwMClcbiAgICAgIH1cbiAgICApXG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZSlcbiAgICAgIGlmICh0eXBlb2Ygc3RvcCA9PT0gJ2Z1bmN0aW9uJykgc3RvcCgpXG4gICAgfVxuICB9LCBbXSlcblxuICByZXR1cm4gPGNhbnZhcyByZWY9e2NhbnZhc1JlZn0gY2xhc3NOYW1lPVwibS1jYW52YXNcIiAvPlxufVxuXG5leHBvcnQgZGVmYXVsdCBDYW52YXNNZXRlb3JBbmRNXG4iXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VFZmZlY3QiLCJ1c2VSZWYiLCJzdGFydE1ldGVvclNlcXVlbmNlIiwiYnVpbGRDcnlzdGFsTSIsImNvbXB1dGVNQW5jaG9yIiwiQ2FudmFzTWV0ZW9yQW5kTSIsImNhbnZhc1JlZiIsImNhbnZhcyIsImN1cnJlbnQiLCJjdHgiLCJnZXRDb250ZXh0IiwicmVzaXplIiwiZHByIiwid2luZG93IiwiZGV2aWNlUGl4ZWxSYXRpbyIsInciLCJpbm5lcldpZHRoIiwiaCIsImlubmVySGVpZ2h0Iiwic3R5bGUiLCJ3aWR0aCIsImhlaWdodCIsIk1hdGgiLCJmbG9vciIsInNldFRyYW5zZm9ybSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYW5jaG9yIiwic3RvcCIsInNldFRpbWVvdXQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVmIiwiY2xhc3NOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/components/CanvasMeteorAndM.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/modules/crystalEngine.ts":
/*!**************************************!*\
  !*** ./app/modules/crystalEngine.ts ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildCrystalM: function() { return /* binding */ buildCrystalM; },\n/* harmony export */   computeMAnchor: function() { return /* binding */ computeMAnchor; }\n/* harmony export */ });\n// app/modules/crystalEngine.ts\n/** Linker unterer Anker exakt wie im M */ function computeMAnchor(w, h) {\n    const leftX = w * 0.28;\n    const baseY = h * 0.74;\n    return {\n        x: leftX,\n        y: baseY\n    };\n}\n/**\n * Pen-Sweep: Ein digitaler Stift fährt den Pfad P0→P1→P2→P3→P4 in ~5 s ab\n * und setzt unterwegs Punkte (mehrere parallele Reihen = Strichbreite)\n * mit Mindestabstand. Runde Caps + runde Joins; Valley-Plug füllt die V-Kerbe.\n * Zusätzlich: runde Außenkappen an den oberen Ecken (P1, P3).\n */ function buildCrystalM(ctx, anchor) {\n    const isMobile = /Mobi|Android|iPhone|iPad/i.test(navigator.userAgent);\n    const { width: w, height: h } = ctx.canvas.getBoundingClientRect();\n    // Proportionen (aufrechte Säulen, edel)\n    const baseY = h * 0.74;\n    const topY = h * 0.36;\n    const leftX = w * 0.28;\n    const rightX = w * 0.28 + Math.max(360, w * 0.32);\n    const midX = (leftX + rightX) / 2;\n    const valleyY = baseY - Math.max(90, h * 0.14);\n    const P = [\n        {\n            x: leftX,\n            y: baseY\n        },\n        {\n            x: leftX,\n            y: topY\n        },\n        {\n            x: midX,\n            y: valleyY\n        },\n        {\n            x: rightX,\n            y: topY\n        },\n        {\n            x: rightX,\n            y: baseY\n        } // 4\n    ];\n    // Segmente + Geometrie\n    const segs = [\n        {\n            a: P[0],\n            b: P[1]\n        },\n        {\n            a: P[1],\n            b: P[2]\n        },\n        {\n            a: P[2],\n            b: P[3]\n        },\n        {\n            a: P[3],\n            b: P[4]\n        }\n    ].map((s)=>{\n        const dx = s.b.x - s.a.x;\n        const dy = s.b.y - s.a.y;\n        const len = Math.hypot(dx, dy);\n        const tx = len ? dx / len : 0;\n        const ty = len ? dy / len : 0;\n        const nx = ty;\n        const ny = -tx;\n        return {\n            ...s,\n            dx,\n            dy,\n            len,\n            tx,\n            ty,\n            nx,\n            ny\n        };\n    });\n    const totalLen = segs.reduce((s, g)=>s + g.len, 0);\n    // Look & Rasterabstände\n    const dotR = isMobile ? 1.3 : 1.6;\n    const minGap = isMobile ? 1.8 : 2.2;\n    const stepAlong = Math.max(isMobile ? 2.4 : 2.0, dotR * 2 + (minGap - 0.6));\n    const gapAcross = Math.max(isMobile ? 4.8 : 4.2, dotR * 2 + minGap);\n    const widthPx = isMobile ? 28 : 56;\n    const rows = Math.max(1, Math.floor(widthPx / gapAcross));\n    const durationSec = 5;\n    // Zeitsteuerung\n    const start = performance.now();\n    let prevS = 0;\n    let raf = 0;\n    // Spatial Hash (Abstands-Garantie)\n    const cell = Math.min(stepAlong, gapAcross) * 0.9;\n    const placed = new Set();\n    const key = (x, y)=>\"\".concat(Math.round(x / cell), \":\").concat(Math.round(y / cell));\n    const drawDot = function(x, y) {\n        let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : dotR;\n        ctx.beginPath();\n        ctx.arc(x, y, r, 0, Math.PI * 2);\n        ctx.fillStyle = \"#6BD5FF\";\n        ctx.shadowColor = \"rgba(107,213,255,0.55)\";\n        ctx.shadowBlur = 4;\n        ctx.fill();\n    };\n    const tryDot = function(x, y) {\n        let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : dotR;\n        const k = key(x, y);\n        if (placed.has(k)) return false;\n        placed.add(k);\n        drawDot(x, y, r);\n        return true;\n    };\n    // Erstpunkt (Anchor)\n    tryDot(anchor.x, anchor.y, dotR + 0.9);\n    const extras = [];\n    // Start-Cap (Halbkreis am P0)\n    if (segs[0]) {\n        pushRoundCap(extras, P[0], -segs[0].tx, -segs[0].ty, rows, gapAcross, dotR, stepAlong, 0);\n    }\n    // Joins + Outer-Caps + Valley-Plug\n    for(let i = 1; i < segs.length; i++){\n        const prev = segs[i - 1];\n        const next = segs[i];\n        const sAtCorner = segs.slice(0, i).reduce((s, g)=>s + g.len, 0);\n        // Innen-Join\n        pushRoundJoin(extras, P[i], prev, next, rows, gapAcross, dotR, stepAlong, sAtCorner);\n        // Tal (innen) auffüllen\n        if (i === 2) {\n            pushValleyPlug(extras, P[2], segs[1], segs[2], rows, gapAcross, dotR, sAtCorner);\n        } else {\n            // Obere Außenkappen an P1 und P3\n            pushOuterCornerCap(extras, P[i], prev, next, rows, gapAcross, dotR, sAtCorner);\n        }\n    }\n    // End-Cap (Halbkreis am P4)\n    const lenBeforeEnd = segs.reduce((s, g)=>s + g.len, 0);\n    pushRoundCap(extras, P[4], segs[segs.length - 1].tx, segs[segs.length - 1].ty, rows, gapAcross, dotR, stepAlong, lenBeforeEnd);\n    // Sortieren, damit die Einblendung zeitlich in den Sweep passt\n    extras.sort((a, b)=>a.s - b.s);\n    let extraIdx = 0;\n    // PEN-SWEEP\n    function tick(now) {\n        const t = Math.min((now - start) / (durationSec * 1000), 1);\n        const sTarget = t * totalLen;\n        // entlang des Pfads Punkte setzen (mehrere Reihen = Strichbreite)\n        for(let s = prevS; s <= sTarget; s += stepAlong){\n            const pos = pointAtLength(s);\n            if (!pos) continue;\n            const { x, y, nx, ny } = pos;\n            const half = (rows - 1) / 2;\n            for(let r = 0; r < rows; r++){\n                const offset = (r - half) * gapAcross;\n                tryDot(x + nx * offset, y + ny * offset);\n            }\n        }\n        prevS = sTarget;\n        // Extras, deren s erreicht ist\n        while(extraIdx < extras.length && extras[extraIdx].s <= sTarget){\n            const e = extras[extraIdx++];\n            var _e_r;\n            tryDot(e.x, e.y, (_e_r = e.r) !== null && _e_r !== void 0 ? _e_r : dotR);\n        }\n        if (t < 1 || extraIdx < extras.length) {\n            raf = requestAnimationFrame(tick);\n        } else {\n            cancelAnimationFrame(raf);\n        }\n    }\n    raf = requestAnimationFrame(tick);\n    // ---------- Helpers -------------------------------------------------------\n    function pointAtLength(s) {\n        let acc = 0;\n        for (const g of segs){\n            if (s <= acc + g.len) {\n                const d = s - acc;\n                const t = g.len ? d / g.len : 0;\n                const x = g.a.x + g.dx * t;\n                const y = g.a.y + g.dy * t;\n                return {\n                    x,\n                    y,\n                    nx: g.nx,\n                    ny: g.ny\n                };\n            }\n            acc += g.len;\n        }\n        const last = segs[segs.length - 1];\n        return {\n            x: last.b.x,\n            y: last.b.y,\n            nx: last.ny,\n            ny: -last.nx\n        };\n    }\n    // runder End-/Start-Cap (Halbkreis)\n    function pushRoundCap(out, C, tx, ty, nRows, across, rDot, along, sBase) {\n        const half = (nRows - 1) / 2;\n        const radius = half * across;\n        const arcStart = Math.atan2(-ty, -tx) - Math.PI / 2;\n        const arcEnd = arcStart + Math.PI;\n        const ringStep = Math.max(rDot * 2 + minGap, across * 0.9);\n        const rings = Math.max(1, Math.floor(radius / ringStep));\n        let seq = 0;\n        for(let r = 0; r <= rings; r++){\n            const rad = r * ringStep;\n            const circ = 2 * Math.PI * Math.max(rad, 1);\n            const pts = Math.max(6, Math.floor(circ / (rDot * 2 + minGap)));\n            for(let i = 0; i <= pts; i++){\n                const a = arcStart + i / pts * (arcEnd - arcStart);\n                out.push({\n                    s: sBase + 0.001 * seq++,\n                    x: C.x + Math.cos(a) * rad,\n                    y: C.y + Math.sin(a) * rad\n                });\n            }\n        }\n    }\n    // runder Join (Sektor) zwischen zwei Segmenten am Eckpunkt C (inkl. Large-Arc)\n    function pushRoundJoin(out, C, prev, next, nRows, across, rDot, along, sAtCorner) {\n        const aIn = Math.atan2(prev.ny, prev.nx);\n        const aOut = Math.atan2(next.ny, next.nx);\n        // Tangenten (für konkav/konvex)\n        let tIn = Math.atan2(prev.ty, prev.tx);\n        let tOut = Math.atan2(next.ty, next.tx);\n        while(tOut - tIn <= -Math.PI)tOut += 2 * Math.PI;\n        while(tOut - tIn > Math.PI)tOut -= 2 * Math.PI;\n        const turn = tOut - tIn;\n        // Winkel-Differenz der Normalen auf [-π,π]\n        let delta = aOut - aIn;\n        while(delta <= -Math.PI)delta += 2 * Math.PI;\n        while(delta > Math.PI)delta -= 2 * Math.PI;\n        // konkav → großen Bogen nehmen\n        const useLargeArc = Math.abs(turn) > Math.PI / 2;\n        let startAngle = aIn;\n        let endAngle = aIn + delta;\n        if (useLargeArc) {\n            if (delta > 0) endAngle = aIn - (2 * Math.PI - delta);\n            else endAngle = aIn + (2 * Math.PI + delta);\n        }\n        const radius = (nRows - 1) * across / 2;\n        const ringStep = Math.max(rDot * 2 + minGap, across * 0.9);\n        const rings = Math.max(1, Math.floor(radius / ringStep));\n        const angStep = Math.max((rDot * 2 + minGap) / Math.max(radius, 1), Math.PI / 36);\n        const dir = endAngle >= startAngle ? 1 : -1;\n        let seq = 0;\n        for(let r = 0; r <= rings; r++){\n            const rad = r * ringStep;\n            for(let a = startAngle; dir > 0 ? a <= endAngle : a >= endAngle; a += dir * angStep){\n                out.push({\n                    s: sAtCorner + 0.001 * seq++,\n                    x: C.x + Math.cos(a) * rad,\n                    y: C.y + Math.sin(a) * rad\n                });\n            }\n        }\n        out.push({\n            s: sAtCorner + 0.002 * seq++,\n            x: C.x,\n            y: C.y,\n            r: rDot\n        });\n    }\n    // füllt die innere V-Ecke (Tal) weich\n    function pushValleyPlug(out, C, prev, next, nRows, across, rDot, sAtCorner) {\n        // Innen-Bisektor\n        let bx = -prev.tx + next.tx;\n        let by = -prev.ty + next.ty;\n        const bl = Math.hypot(bx, by) || 1;\n        bx /= bl;\n        by /= bl;\n        const innerR = (nRows - 1) * across * 0.48;\n        const cx = C.x + bx * (innerR * 0.35);\n        const cy = C.y + by * (innerR * 0.35);\n        const ringStep = Math.max(rDot * 2.0, across * 0.9);\n        const rings = Math.max(2, Math.floor(innerR / ringStep));\n        let seq = 0;\n        for(let r = 0; r <= rings; r++){\n            const rad = r / rings * innerR;\n            const circ = 2 * Math.PI * Math.max(rad, 1);\n            const step = Math.max(rDot * 2.0, across * 0.9);\n            const n = Math.max(8, Math.floor(circ / step));\n            for(let i = 0; i < n; i++){\n                const a = i / n * Math.PI * 2;\n                out.push({\n                    s: sAtCorner + 0.001 * seq++,\n                    x: cx + Math.cos(a) * rad,\n                    y: cy + Math.sin(a) * rad\n                });\n            }\n        }\n        out.push({\n            s: sAtCorner + 0.002 * seq++,\n            x: cx,\n            y: cy,\n            r: rDot\n        });\n    }\n    // runde Außenkappe an konvexen oberen Ecken (P1, P3)\n    function pushOuterCornerCap(out, C, prev, next, nRows, across, rDot, sAtCorner) {\n        const radius = (nRows - 1) * across / 2;\n        // Außen-Bisektor aus den linken Normalen\n        let bx = prev.nx + next.nx;\n        let by = prev.ny + next.ny;\n        const bl = Math.hypot(bx, by) || 1;\n        bx /= bl;\n        by /= bl;\n        // Halbkreis nach außen (orthogonal zum Bisektor)\n        const baseAngle = Math.atan2(by, bx);\n        const arcStart = baseAngle - Math.PI / 2;\n        const arcEnd = baseAngle + Math.PI / 2;\n        const ringStep = Math.max(rDot * 2 + minGap, across * 0.9);\n        const rings = Math.max(1, Math.floor(radius / ringStep));\n        let seq = 0;\n        for(let r = 0; r <= rings; r++){\n            const rad = r * ringStep;\n            const circ = 2 * Math.PI * Math.max(rad, 1);\n            const pts = Math.max(6, Math.floor(circ / (rDot * 2 + minGap)));\n            for(let i = 0; i <= pts; i++){\n                const a = arcStart + i / pts * (arcEnd - arcStart);\n                out.push({\n                    s: sAtCorner + 0.001 * seq++,\n                    x: C.x + Math.cos(a) * rad,\n                    y: C.y + Math.sin(a) * rad\n                });\n            }\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/modules/crystalEngine.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/modules/meteorEngine.ts":
/*!*************************************!*\
  !*** ./app/modules/meteorEngine.ts ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   startMeteorSequence: function() { return /* binding */ startMeteorSequence; }\n/* harmony export */ });\nfunction startMeteorSequence(ctx, target, onImpact) {\n    const isMobile = /Mobi|Android|iPhone|iPad/i.test(navigator.userAgent);\n    const rect = ctx.canvas.getBoundingClientRect();\n    const w = rect.width, h = rect.height;\n    const x0 = w * 1.08, y0 = -h * 0.08;\n    const frames = isMobile ? 90 : 120;\n    let t = 0, rafId = 0, hit = false;\n    const dx = target.x - x0, dy = target.y - y0;\n    const ease = (p)=>1 - (1 - p) * (1 - p);\n    const tail = [];\n    function drawTail() {\n        for(let i = tail.length - 1; i >= 0; i--){\n            const d = tail[i];\n            ctx.beginPath();\n            ctx.arc(d.x, d.y, isMobile ? 1.6 : 2.2, 0, Math.PI * 2);\n            ctx.fillStyle = \"rgba(107,213,255,\".concat(d.a, \")\");\n            ctx.fill();\n            d.a -= 0.03;\n            if (d.a <= 0) tail.splice(i, 1);\n        }\n    }\n    function meteor(x, y) {\n        ctx.beginPath();\n        ctx.arc(x, y, isMobile ? 4 : 6, 0, Math.PI * 2);\n        ctx.fillStyle = \"#6BD5FF\";\n        ctx.shadowColor = \"rgba(107,213,255,1)\";\n        ctx.shadowBlur = 20;\n        ctx.fill();\n    }\n    function loop() {\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n        const p = Math.min(t / frames, 1), e = ease(p);\n        const x = x0 + dx * e, y = y0 + dy * e;\n        tail.push({\n            x,\n            y,\n            a: 1\n        });\n        drawTail();\n        meteor(x, y);\n        if (!hit && p >= 1) {\n            hit = true;\n            cancelAnimationFrame(rafId);\n            // WISCH Meteor vollständig weg\n            ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n            onImpact();\n            return;\n        }\n        t++;\n        rafId = requestAnimationFrame(loop);\n    }\n    rafId = requestAnimationFrame(loop);\n    return ()=>cancelAnimationFrame(rafId);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9tb2R1bGVzL21ldGVvckVuZ2luZS50cyIsIm1hcHBpbmdzIjoiOzs7O0FBRU8sU0FBU0Esb0JBQ2RDLEdBQTZCLEVBQzdCQyxNQUFVLEVBQ1ZDLFFBQW9CO0lBRXBCLE1BQU1DLFdBQVcsNEJBQTRCQyxJQUFJLENBQUNDLFVBQVVDLFNBQVM7SUFDckUsTUFBTUMsT0FBT1AsSUFBSVEsTUFBTSxDQUFDQyxxQkFBcUI7SUFDN0MsTUFBTUMsSUFBSUgsS0FBS0ksS0FBSyxFQUFFQyxJQUFJTCxLQUFLTSxNQUFNO0lBRXJDLE1BQU1DLEtBQUtKLElBQUksTUFBTUssS0FBSyxDQUFDSCxJQUFJO0lBQy9CLE1BQU1JLFNBQVNiLFdBQVcsS0FBSztJQUMvQixJQUFJYyxJQUFJLEdBQUdDLFFBQVEsR0FBR0MsTUFBTTtJQUM1QixNQUFNQyxLQUFLbkIsT0FBT29CLENBQUMsR0FBR1AsSUFBSVEsS0FBS3JCLE9BQU9zQixDQUFDLEdBQUdSO0lBQzFDLE1BQU1TLE9BQU8sQ0FBQ0MsSUFBVyxJQUFFLENBQUMsSUFBRUEsQ0FBQUEsSUFBSSxLQUFFQSxDQUFBQTtJQUNwQyxNQUFNQyxPQUFvQyxFQUFFO0lBRTVDLFNBQVNDO1FBQ1AsSUFBSyxJQUFJQyxJQUFFRixLQUFLRyxNQUFNLEdBQUMsR0FBRUQsS0FBRyxHQUFFQSxJQUFJO1lBQ2hDLE1BQU1FLElBQUVKLElBQUksQ0FBQ0UsRUFBRTtZQUNmNUIsSUFBSStCLFNBQVM7WUFBSS9CLElBQUlnQyxHQUFHLENBQUNGLEVBQUVULENBQUMsRUFBQ1MsRUFBRVAsQ0FBQyxFQUFDcEIsV0FBUyxNQUFJLEtBQUksR0FBRThCLEtBQUtDLEVBQUUsR0FBQztZQUM1RGxDLElBQUltQyxTQUFTLEdBQUMsb0JBQXdCLE9BQUpMLEVBQUVNLENBQUMsRUFBQztZQUFJcEMsSUFBSXFDLElBQUk7WUFDbERQLEVBQUVNLENBQUMsSUFBRTtZQUFNLElBQUdOLEVBQUVNLENBQUMsSUFBRSxHQUFHVixLQUFLWSxNQUFNLENBQUNWLEdBQUU7UUFDdEM7SUFDRjtJQUNBLFNBQVNXLE9BQU9sQixDQUFRLEVBQUNFLENBQVE7UUFDL0J2QixJQUFJK0IsU0FBUztRQUFJL0IsSUFBSWdDLEdBQUcsQ0FBQ1gsR0FBRUUsR0FBRXBCLFdBQVMsSUFBRSxHQUFFLEdBQUU4QixLQUFLQyxFQUFFLEdBQUM7UUFDcERsQyxJQUFJbUMsU0FBUyxHQUFDO1FBQ2RuQyxJQUFJd0MsV0FBVyxHQUFDO1FBQ2hCeEMsSUFBSXlDLFVBQVUsR0FBQztRQUNmekMsSUFBSXFDLElBQUk7SUFDVjtJQUVBLFNBQVNLO1FBQ1AxQyxJQUFJMkMsU0FBUyxDQUFDLEdBQUUsR0FBRTNDLElBQUlRLE1BQU0sQ0FBQ0csS0FBSyxFQUFDWCxJQUFJUSxNQUFNLENBQUNLLE1BQU07UUFDcEQsTUFBTVksSUFBRVEsS0FBS1csR0FBRyxDQUFDM0IsSUFBRUQsUUFBTyxJQUFJNkIsSUFBRXJCLEtBQUtDO1FBQ3JDLE1BQU1KLElBQUVQLEtBQUdNLEtBQUd5QixHQUFHdEIsSUFBRVIsS0FBR08sS0FBR3VCO1FBQ3pCbkIsS0FBS29CLElBQUksQ0FBQztZQUFDekI7WUFBRUU7WUFBRWEsR0FBRTtRQUFDO1FBQUlUO1FBQVlZLE9BQU9sQixHQUFFRTtRQUUzQyxJQUFJLENBQUNKLE9BQU9NLEtBQUcsR0FBRTtZQUNmTixNQUFNO1lBQ040QixxQkFBcUI3QjtZQUNyQiwrQkFBK0I7WUFDL0JsQixJQUFJMkMsU0FBUyxDQUFDLEdBQUUsR0FBRTNDLElBQUlRLE1BQU0sQ0FBQ0csS0FBSyxFQUFDWCxJQUFJUSxNQUFNLENBQUNLLE1BQU07WUFDcERYO1lBQ0E7UUFDRjtRQUNBZTtRQUFLQyxRQUFROEIsc0JBQXNCTjtJQUNyQztJQUVBeEIsUUFBUThCLHNCQUFzQk47SUFDOUIsT0FBTyxJQUFNSyxxQkFBcUI3QjtBQUNwQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9hcHAvbW9kdWxlcy9tZXRlb3JFbmdpbmUudHM/M2U1NCJdLCJzb3VyY2VzQ29udGVudCI6WyJ0eXBlIFhZID0geyB4OiBudW1iZXI7IHk6IG51bWJlciB9XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGFydE1ldGVvclNlcXVlbmNlKFxuICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCxcbiAgdGFyZ2V0OiBYWSxcbiAgb25JbXBhY3Q6ICgpID0+IHZvaWRcbik6ICgpID0+IHZvaWQge1xuICBjb25zdCBpc01vYmlsZSA9IC9Nb2JpfEFuZHJvaWR8aVBob25lfGlQYWQvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpXG4gIGNvbnN0IHJlY3QgPSBjdHguY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gIGNvbnN0IHcgPSByZWN0LndpZHRoLCBoID0gcmVjdC5oZWlnaHRcblxuICBjb25zdCB4MCA9IHcgKiAxLjA4LCB5MCA9IC1oICogMC4wOFxuICBjb25zdCBmcmFtZXMgPSBpc01vYmlsZSA/IDkwIDogMTIwXG4gIGxldCB0ID0gMCwgcmFmSWQgPSAwLCBoaXQgPSBmYWxzZVxuICBjb25zdCBkeCA9IHRhcmdldC54IC0geDAsIGR5ID0gdGFyZ2V0LnkgLSB5MFxuICBjb25zdCBlYXNlID0gKHA6bnVtYmVyKT0+MS0oMS1wKSooMS1wKVxuICBjb25zdCB0YWlsOnt4Om51bWJlcjt5Om51bWJlcjthOm51bWJlcn1bXT1bXVxuXG4gIGZ1bmN0aW9uIGRyYXdUYWlsKCl7XG4gICAgZm9yIChsZXQgaT10YWlsLmxlbmd0aC0xO2k+PTA7aS0tKXtcbiAgICAgIGNvbnN0IGQ9dGFpbFtpXVxuICAgICAgY3R4LmJlZ2luUGF0aCgpOyBjdHguYXJjKGQueCxkLnksaXNNb2JpbGU/MS42OjIuMiwwLE1hdGguUEkqMilcbiAgICAgIGN0eC5maWxsU3R5bGU9YHJnYmEoMTA3LDIxMywyNTUsJHtkLmF9KWA7IGN0eC5maWxsKClcbiAgICAgIGQuYS09MC4wMzsgaWYoZC5hPD0wKSB0YWlsLnNwbGljZShpLDEpXG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1ldGVvcih4Om51bWJlcix5Om51bWJlcil7XG4gICAgY3R4LmJlZ2luUGF0aCgpOyBjdHguYXJjKHgseSxpc01vYmlsZT80OjYsMCxNYXRoLlBJKjIpXG4gICAgY3R4LmZpbGxTdHlsZT0nIzZCRDVGRidcbiAgICBjdHguc2hhZG93Q29sb3I9J3JnYmEoMTA3LDIxMywyNTUsMSknXG4gICAgY3R4LnNoYWRvd0JsdXI9MjBcbiAgICBjdHguZmlsbCgpXG4gIH1cblxuICBmdW5jdGlvbiBsb29wKCl7XG4gICAgY3R4LmNsZWFyUmVjdCgwLDAsY3R4LmNhbnZhcy53aWR0aCxjdHguY2FudmFzLmhlaWdodClcbiAgICBjb25zdCBwPU1hdGgubWluKHQvZnJhbWVzLDEpLCBlPWVhc2UocClcbiAgICBjb25zdCB4PXgwK2R4KmUsIHk9eTArZHkqZVxuICAgIHRhaWwucHVzaCh7eCx5LGE6MX0pOyBkcmF3VGFpbCgpOyBtZXRlb3IoeCx5KVxuXG4gICAgaWYgKCFoaXQgJiYgcD49MSl7XG4gICAgICBoaXQgPSB0cnVlXG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShyYWZJZClcbiAgICAgIC8vIFdJU0NIIE1ldGVvciB2b2xsc3TDpG5kaWcgd2VnXG4gICAgICBjdHguY2xlYXJSZWN0KDAsMCxjdHguY2FudmFzLndpZHRoLGN0eC5jYW52YXMuaGVpZ2h0KVxuICAgICAgb25JbXBhY3QoKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHQrKzsgcmFmSWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcClcbiAgfVxuXG4gIHJhZklkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApXG4gIHJldHVybiAoKSA9PiBjYW5jZWxBbmltYXRpb25GcmFtZShyYWZJZClcbn1cbiJdLCJuYW1lcyI6WyJzdGFydE1ldGVvclNlcXVlbmNlIiwiY3R4IiwidGFyZ2V0Iiwib25JbXBhY3QiLCJpc01vYmlsZSIsInRlc3QiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJyZWN0IiwiY2FudmFzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidyIsIndpZHRoIiwiaCIsImhlaWdodCIsIngwIiwieTAiLCJmcmFtZXMiLCJ0IiwicmFmSWQiLCJoaXQiLCJkeCIsIngiLCJkeSIsInkiLCJlYXNlIiwicCIsInRhaWwiLCJkcmF3VGFpbCIsImkiLCJsZW5ndGgiLCJkIiwiYmVnaW5QYXRoIiwiYXJjIiwiTWF0aCIsIlBJIiwiZmlsbFN0eWxlIiwiYSIsImZpbGwiLCJzcGxpY2UiLCJtZXRlb3IiLCJzaGFkb3dDb2xvciIsInNoYWRvd0JsdXIiLCJsb29wIiwiY2xlYXJSZWN0IiwibWluIiwiZSIsInB1c2giLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/modules/meteorEngine.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/page.tsx":
/*!**********************!*\
  !*** ./app/page.tsx ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Page; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.3_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _styles_m_path_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/styles/m-path.css */ \"(app-pages-browser)/./styles/m-path.css\");\n/* harmony import */ var _components_CanvasMeteorAndM__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/CanvasMeteorAndM */ \"(app-pages-browser)/./app/components/CanvasMeteorAndM.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \n\n\nfunction Page() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        style: {\n            margin: 0,\n            padding: 0,\n            overflow: \"hidden\",\n            width: \"100vw\",\n            height: \"100vh\",\n            backgroundColor: \"#000\"\n        },\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_CanvasMeteorAndM__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {}, void 0, false, {\n            fileName: \"/Users/nabilkhayat/Projekte/M-PATHY/app/page.tsx\",\n            lineNumber: 12,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/nabilkhayat/Projekte/M-PATHY/app/page.tsx\",\n        lineNumber: 8,\n        columnNumber: 5\n    }, this);\n}\n_c = Page;\nvar _c;\n$RefreshReg$(_c, \"Page\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9wYWdlLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUU0QjtBQUNnQztBQUU3QyxTQUFTQztJQUN0QixxQkFDRSw4REFBQ0M7UUFBSUMsT0FBTztZQUNWQyxRQUFRO1lBQUdDLFNBQVM7WUFBR0MsVUFBVTtZQUNqQ0MsT0FBTztZQUFTQyxRQUFRO1lBQVNDLGlCQUFpQjtRQUNwRDtrQkFDRSw0RUFBQ1Qsb0VBQWdCQTs7Ozs7Ozs7OztBQUd2QjtLQVR3QkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwL3BhZ2UudHN4Pzc2MDMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnXG5cbmltcG9ydCAnQC9zdHlsZXMvbS1wYXRoLmNzcydcbmltcG9ydCBDYW52YXNNZXRlb3JBbmRNIGZyb20gJy4vY29tcG9uZW50cy9DYW52YXNNZXRlb3JBbmRNJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQYWdlKCkge1xuICByZXR1cm4gKFxuICAgIDxkaXYgc3R5bGU9e3tcbiAgICAgIG1hcmdpbjogMCwgcGFkZGluZzogMCwgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgd2lkdGg6ICcxMDB2dycsIGhlaWdodDogJzEwMHZoJywgYmFja2dyb3VuZENvbG9yOiAnIzAwMCdcbiAgICB9fT5cbiAgICAgIDxDYW52YXNNZXRlb3JBbmRNIC8+XG4gICAgPC9kaXY+XG4gIClcbn1cbiJdLCJuYW1lcyI6WyJDYW52YXNNZXRlb3JBbmRNIiwiUGFnZSIsImRpdiIsInN0eWxlIiwibWFyZ2luIiwicGFkZGluZyIsIm92ZXJmbG93Iiwid2lkdGgiLCJoZWlnaHQiLCJiYWNrZ3JvdW5kQ29sb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/page.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/next@14.2.3_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!*******************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@14.2.3_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \*******************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.3_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/compiled/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider'); // TODO: Delete with enableRenderableContext\n\nvar REACT_CONSUMER_TYPE = Symbol.for('react.consumer');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\nvar enableRenderableContext = false;\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false;\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n}\n\nvar REACT_CLIENT_REFERENCE$2 = Symbol.for('react.client.reference'); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  if (typeof type === 'function') {\n    if (type.$$typeof === REACT_CLIENT_REFERENCE$2) {\n      // TODO: Create a convention for naming client references with debug info.\n      return null;\n    }\n\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n    case REACT_CACHE_TYPE:\n      {\n        return 'Cache';\n      }\n\n  }\n\n  if (typeof type === 'object') {\n    {\n      if (typeof type.tag === 'number') {\n        error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n      }\n    }\n\n    switch (type.$$typeof) {\n      case REACT_PROVIDER_TYPE:\n        {\n          var provider = type;\n          return getContextName(provider._context) + '.Provider';\n        }\n\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n\n        {\n          return getContextName(context) + '.Consumer';\n        }\n\n      case REACT_CONSUMER_TYPE:\n        {\n          return null;\n        }\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n    }\n  }\n\n  return null;\n}\n\n// $FlowFixMe[method-unbinding]\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar assign = Object.assign;\n\n/*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object'; // $FlowFixMe[incompatible-return]\n\n    return type;\n  }\n} // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar REACT_CLIENT_REFERENCE$1 = Symbol.for('react.client.reference');\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || enableRenderableContext  || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n/**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */\n\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */\n\n\n  var RunInRootFrame = {\n    DetermineComponentFrameRoot: function () {\n      var control;\n\n      try {\n        // This should throw.\n        if (construct) {\n          // Something should be setting the props in the constructor.\n          var Fake = function () {\n            throw Error();\n          }; // $FlowFixMe[prop-missing]\n\n\n          Object.defineProperty(Fake.prototype, 'props', {\n            set: function () {\n              // We use a throwing setter instead of frozen or non-writable props\n              // because that won't throw in a non-strict mode function.\n              throw Error();\n            }\n          });\n\n          if (typeof Reflect === 'object' && Reflect.construct) {\n            // We construct a different control for this case to include any extra\n            // frames added by the construct call.\n            try {\n              Reflect.construct(Fake, []);\n            } catch (x) {\n              control = x;\n            }\n\n            Reflect.construct(fn, [], Fake);\n          } else {\n            try {\n              Fake.call();\n            } catch (x) {\n              control = x;\n            } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n            fn.call(Fake.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (x) {\n            control = x;\n          } // TODO(luna): This will currently only throw if the function component\n          // tries to access React/ReactDOM/props. We should probably make this throw\n          // in simple components too\n\n\n          var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n          // component, which we don't yet support. Attach a noop catch handler to\n          // silence the error.\n          // TODO: Implement component stacks for async client components?\n\n          if (maybePromise && typeof maybePromise.catch === 'function') {\n            maybePromise.catch(function () {});\n          }\n        }\n      } catch (sample) {\n        // This is inlined manually because closure doesn't do it for us.\n        if (sample && control && typeof sample.stack === 'string') {\n          return [sample.stack, control.stack];\n        }\n      }\n\n      return [null, null];\n    }\n  }; // $FlowFixMe[prop-missing]\n\n  RunInRootFrame.DetermineComponentFrameRoot.displayName = 'DetermineComponentFrameRoot';\n  var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, 'name'); // Before ES6, the `name` property was not configurable.\n\n  if (namePropDescriptor && namePropDescriptor.configurable) {\n    // V8 utilizes a function's `name` property when generating a stack trace.\n    Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // Configurable properties can be updated even if its writable descriptor\n    // is set to `false`.\n    // $FlowFixMe[cannot-write]\n    'name', {\n      value: 'DetermineComponentFrameRoot'\n    });\n  }\n\n  try {\n    var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),\n        sampleStack = _RunInRootFrame$Deter[0],\n        controlStack = _RunInRootFrame$Deter[1];\n\n    if (sampleStack && controlStack) {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sampleStack.split('\\n');\n      var controlLines = controlStack.split('\\n');\n      var s = 0;\n      var c = 0;\n\n      while (s < sampleLines.length && !sampleLines[s].includes('DetermineComponentFrameRoot')) {\n        s++;\n      }\n\n      while (c < controlLines.length && !controlLines[c].includes('DetermineComponentFrameRoot')) {\n        c++;\n      } // We couldn't find our intentionally injected common root frame, attempt\n      // to find another common root frame by search from the bottom of the\n      // control stack...\n\n\n      if (s === sampleLines.length || c === controlLines.length) {\n        s = sampleLines.length - 1;\n        c = controlLines.length - 1;\n\n        while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n          // We expect at least one stack frame to be shared.\n          // Typically this will be the root most one. However, stack frames may be\n          // cut off due to maximum stack limits. In this case, one maybe cut off\n          // earlier than the other. We assume that the sample is longer or the same\n          // and there for cut off earlier. So we should find the root most frame in\n          // the sample somewhere in the control.\n          c--;\n        }\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                if (true) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\nvar REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference');\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    {\n      var warnAboutAccessingRef = function () {\n        if (!specialPropRefWarningShown) {\n          specialPropRefWarningShown = true;\n\n          error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n        }\n      };\n\n      warnAboutAccessingRef.isReactWarning = true;\n      Object.defineProperty(props, 'ref', {\n        get: warnAboutAccessingRef,\n        configurable: true\n      });\n    }\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nfunction ReactElement(type, key, _ref, self, source, owner, props) {\n  var ref;\n\n  {\n    ref = _ref;\n  }\n\n  var element;\n\n  {\n    // In prod, `ref` is a regular property. It will be removed in a\n    // future release.\n    element = {\n      // This tag allows us to uniquely identify this as a React Element\n      $$typeof: REACT_ELEMENT_TYPE,\n      // Built-in properties that belong on the element\n      type: type,\n      key: key,\n      ref: ref,\n      props: props,\n      // Record the component responsible for creating this element.\n      _owner: owner\n    };\n  }\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // debugInfo contains Server Component debug information.\n\n    Object.defineProperty(element, '_debugInfo', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: null\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n}\nvar didWarnAboutKeySpread = {};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV$1(type, config, maybeKey, isStaticChildren, source, self) {\n  {\n    if (!isValidElementType(type)) {\n      // This is an invalid element type.\n      //\n      // We warn in this case but don't throw. We expect the element creation to\n      // succeed and there will likely be errors in render.\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    } else {\n      // This is a valid element type.\n      // Skip key warning if the type isn't valid since our key validation logic\n      // doesn't expect a non-string/function type and can throw confusing\n      // errors. We don't want exception behavior to differ between dev and\n      // prod. (Rendering will throw with a helpful message and as soon as the\n      // type is fixed, the key warnings will appear.)\n      var children = config.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    } // Warn about key spread regardless of whether the type is valid.\n\n\n    if (hasOwnProperty.call(config, 'key')) {\n      var componentName = getComponentNameFromType(type);\n      var keys = Object.keys(config).filter(function (k) {\n        return k !== 'key';\n      });\n      var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';\n\n      if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n        var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n\n        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + '  let props = %s;\\n' + '  <%s {...props} />\\n' + 'React keys must be passed directly to JSX without using spread:\\n' + '  let props = %s;\\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);\n\n        didWarnAboutKeySpread[componentName + beforeExample] = true;\n      }\n    }\n\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      {\n        ref = config.ref;\n      }\n\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && // Skip over reserved prop names\n      propName !== 'key' && (propName !== 'ref')) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    var element = ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    }\n\n    return element;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object' || !node) {\n      return;\n    }\n\n    if (node.$$typeof === REACT_CLIENT_REFERENCE) ; else if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\nvar ownerHasKeyUseWarning = {};\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement(null);\n  }\n}\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = getComponentNameFromType(parentType);\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  // TODO: Move this to render phase instead of at element creation.\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement(null);\n    }\n  }\n}\n\nvar jsxDEV = jsxDEV$1 ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/next@14.2.3_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/.pnpm/next@14.2.3_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!*********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@14.2.3_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \*********************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.3_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZXh0QDE0LjIuM19yZWFjdC1kb21AMTguMi4wX3JlYWN0QDE4LjIuMF9fcmVhY3RAMTguMi4wL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSx5UUFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wbnBtL25leHRAMTQuMi4zX3JlYWN0LWRvbUAxOC4yLjBfcmVhY3RAMTguMi4wX19yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC9qc3gtZGV2LXJ1bnRpbWUuanM/OWIxZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/next@14.2.3_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/./node_modules/.pnpm/next@14.2.3_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fnabilkhayat%2FProjekte%2FM-PATHY%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);